# This is a basic workflow to help you get started with Actions

name: Provision and Configure Azure Infrastructure

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  Infrastructure_Provisioning:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    permissions: write-all


    
    # Set the working directory to main for the config files
    defaults:
      run:
        shell: bash
        working-directory: /home/runner/work/azml-aks-online-endpoint/

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

          # Install packages
      - name: Install required packages.
        run: sudo apt-get update && sudo apt-get install unzip -y && sudo apt-get install vim -y && sudo apt-get install python3 -y &&  sudo apt-get install jq -y && sudo apt-get install -y gettext-base && sudo apt-get install npm -y && curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash && sudo az aks install-cli | sudo bash
      
      - name: Generate runner url from secret
        run: |
            export gh_runner_url="https://api.github.com/repos/${{ github.repository }}/actions/runners/registration-token"
            echo "GH_runner_url=$gh_runner_url" >> $GITHUB_ENV


      - name: Generate runner registration token 
        run: |
            export token="$(curl -L   -X POST   -H "Accept: application/vnd.github+json"   -H "Authorization: Bearer ${{ secrets.GH_PAT }} "  -H "X-GitHub-Api-Version: 2022-11-28" $GH_runner_url | jq -r .token)"
            echo "GH_runner_token=$token" >> $GITHUB_ENV
     

      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create Resource Group
        env: 
          RESOURCE_GROUP: azml-aks-online-endpoint-rg
        run: |
            az group create --name $RESOURCE_GROUP --location eastus
      
  #    - name: Create VNET and Subnet
  #      env: 
  #        RESOURCE_GROUP: azml-aks-online-endpoint-rg
  #      run: |
  #        az network vnet create --resource-group $RESOURCE_GROUP --name azml-aks-online-endpoint-vnet
  #        az network nsg create --resource-group $RESOURCE_GROUP --name azml-aks-online-endpoint-nsg
  #        az network vnet subnet create  --resource-group $RESOURCE_GROUP --name azml-aks-online-endpoint-subnet --vnet-name azml-aks-online-endpoint-vnet  --address-prefixes 10.0.0.0/22 --network-security-group azml-aks-online-endpoint-nsg

  #    - name: Get runner IP address
  #      run: |
  #          export runner_ip="$(curl -s https://api.ipify.org)"
  #          echo "runner_ip=$runner_ip" >> $GITHUB_ENV

   #   - name: Create AKS Cluster
   #     env: 
   #       RESOURCE_GROUP: azml-aks-online-endpoint-rg
   #       SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
   #     run: |
   #      SUBNET=$(az network vnet subnet list --resource-group $RESOURCE_GROUP --vnet-name azml-aks-online-endpoint-vnet --query "[?name=='azml-aks-online-endpoint-subnet'].id" --output tsv)
   #      az aks create \
   #       --resource-group $RESOURCE_GROUP \
   #       --name azml-aks-online-endpoint-cluster \
   #       --load-balancer-sku standard \
   #       --network-plugin azure \
   #       --vnet-subnet-id $SUBNET \
   #      --dns-service-ip 10.2.0.10 \
   #       --service-cidr 10.2.0.0/24 \
   #       --enable-managed-identity \
   #       --generate-ssh-keys \
   #       --api-server-authorized-ip-ranges $runner_ip

      - name: Get KubeConfig
        env: 
          RESOURCE_GROUP: azml-aks-online-endpoint-rg
        run: az aks get-credentials -g $RESOURCE_GROUP  -n azml-aks-online-endpoint-cluster --overwrite-existing --admin


  #    - name: Create AZML K8s namespace
  #      run: kubectl create namespace azml-aks-online-endpoint-ns
        
        
      - name: Install AZ ML CLI Extenstion 
        run: |
            curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash 
            az extension add -n ml -y

      - name: Setup AZML workspace
        env:
          WORKSPACE: azml_aks_online_endpoint_wrkspce
          RESOURCE_GROUP: azml-aks-online-endpoint-rg
          LOCATION: eastus 
        run: |
            az ml workspace create -n $WORKSPACE -g $RESOURCE_GROUP -l $LOCATION
            az configure --defaults group=$RESOURCE_GROUP workspace=$WORKSPACE location=$LOCATION

      - name: Clone model training repository
        run: |
            git clone --depth 1 https://github.com/Azure/azureml-examples
     
      - name: Create training managed compute
        run: |
            az ml compute create -n cpu-cluster --type amlcompute --min-instances 0 --max-instances 4
      
      - name: DEBUG PWD
        run: |
            pwd
            ls -lar
      
      - name: Train example model
        working-directory: /home/runner/work/azml-aks-online-endpoint/azml-aks-online-endpoint/azureml-examples/cli/
        run: |
           run_id=$(az ml job create -f jobs/single-step/scikit-learn/iris/job.yml --query name -o tsv)

      - name: Register the model
        run: |
          az ml model create -n sklearn-iris-example -v 1 -p runs:/$run_id/model --type mlflow_model
      
      - name: Add preview extension
        run: |
          az extension add --name aks-preview
          az extension update --name aks-preview

      - name: Register and install the GPU Extenstion
        env:
          RESOURCE_GROUP: azml-aks-online-endpoint-rg
        run: |
           az feature register --namespace "Microsoft.ContainerService" --name "GPUDedicatedVHDPreview"
           az provider register --namespace Microsoft.ContainerService

      - name: Register and install the Azure ML CLI extension
        env:
          RESOURCE_GROUP: azml-aks-online-endpoint-rg
        run: |
           az k8s-extension create --name azml-aks-online --extension-type Microsoft.AzureML.Kubernetes --config enableTraining=True enableInference=True inferenceRouterServiceType=LoadBalancer allowInsecureConnections=True InferenceRouterHA=False --cluster-type managedClusters --cluster-name azml-aks-online-endpoint-cluster --resource-group $RESOURCE_GROUP --scope cluster
     
      - name: Create GPU Nodepool for Model 1
        env:
          RESOURCE_GROUP: azml-aks-online-endpoint-rg
        run: |
         az aks nodepool add \
         --resource-group $RESOURCE_GROUP \
         --cluster-name azml-aks-online-endpoint-cluster \
         --name gpu-model1 \
         --node-count 1 \
         --node-vm-size Standard_NCASv3_T4  \
         --labels gpu=yes costcenter=5000 model=model1 \
         --aks-custom-headers UseGPUDedicatedVHD=true \
         --enable-cluster-autoscaler \
         --min-count 1 \
         --max-count 3

      - name: Create GPU Nodepool for Model 2
        env:
          RESOURCE_GROUP: azml-aks-online-endpoint-rg
        run: |
         az aks nodepool add \
         --resource-group $RESOURCE_GROUP \
         --cluster-name azml-aks-online-endpoint-cluster \
         --name gpu-model2 \
         --node-count 1 \
         --node-vm-size Standard_NCASv3_T4  \
         --labels gpu=yes costcenter=6000 model=model2 \
         --aks-custom-headers UseGPUDedicatedVHD=true \
         --enable-cluster-autoscaler \
         --min-count 1 \
         --max-count 3

      - name: Attatch cluster to ML Workspace
        env:
          RESOURCE_GROUP: azml-aks-online-endpoint-rg
          WORKSPACE: azml_aks_online_endpoint_workspace
          SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
        run: |
         az ml compute attach --resource-group $RESOURCE_GROUP --workspace-name $WORKSPACE --type Kubernetes --name azml-aks-online-endpoint-compute --resource-id "/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RESOURCE_GROUP/providers/Microsoft.ContainerService/managedclusters/azml-aks-online-endpoint-cluster" --identity-type SystemAssigned --namespace azml-aks-online-endpoint-ns --no-wait
      
      - name: Create ML Endpoint with AKS backend
        env:
          ENDPOINT_NAME: azml-aks-online-endpoint
        working-directory: /home/runner/work/azml-aks-online-endpoint/azml-aks-online-endpoint/azureml-examples/cli/
        run: |
          az ml online-endpoint create --name $ENDPOINT_NAME -f endpoints/online/managed/sample/endpoint.yml
          az ml online-deployment create --name blue --endpoint $ENDPOINT_NAME -f endpoints/online/managed/sample/blue-deployment.yml --all-traffic